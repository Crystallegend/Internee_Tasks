_________________TASK MANAGEMENT SERVERLESS APPLICATION IMPLEMENTATION____________________

CONFIGURE DYNAMODB
--Create a table named as tasks with partition key(primary key) as taskID

CONFIGURE IAM
--Create a custom role
--Attach a managed policy to it, named on AWS as 'AWSLambdaBasicExecutionRole'
--Create an inline policy and attach it to the role, json code for policy is given in policy.json (Remember replacing your table's ARN)

CONFIGURE LAMBDA
--Create 4 functions names as:
    1). createTask
    2). getTasks
    3). updateTask
    4). deleteTask
--Code for each function is given in a seperate python file named as functions.py
--Attach the custom role, made in IAM, with each function

CONFIGURE API GATEWAY
--Create a REST API
--Create a resource with resource-name: '/tasks' and create following methods under it:
    POST method attached with createTask lambda function
    GET method attached with getTasks lambda function
--Create anothe resource as '/tasks/{taskID}' and create following methods under it:
    PUT method attached with updateTask lambda function
    DELETE method attached with deleteTask lambda function
--Enable CORS for each resource by selecting all the methods


CONFIGURE AMPLIFY
--Replace your API endpoint of the REST API with the 'endpoint' variable in the script.js file
--Make a zip folder of web files (index.html, styles.css, script.js)
--Create a Web App in AWS Amplify and deploy the zip folder.
 